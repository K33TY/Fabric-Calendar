package login;

import javax.servlet.ServletException;
import sif.servlet.*;
import sif.html.*;

// From auth package but changed AuthServlet to HTTMLAuthServlet to work with login package

class SubmitNewUserAction[principal servP] extends AbstractAction[servP]
{
    private final CreateUserAction[servP]{this}@{⊤→} createUserAct;

    public SubmitNewUserAction
    (   // Constructor arguments
        Servlet[servP]{this} s,
        CreateUserAction[servP]{this} createUserAct
    )
    {
        this.createUserAct = createUserAct;
        super();
        initFields(s);
    }

    public final void invoke{*lbl}
    (
        label{*lbl} lbl,
        Request[servP]{*lbl} req
    )
    throws  (ServletException{*lbl;req.session←})
    where   caller(req.session),
            servP actsfor req.session,
            lbl <= {req.session→}
    {
        Servlet[servP] servlet_ = getServlet();
        HTMLAuthServlet[servP] servlet;

        if (lbl <= new label {servlet_.store$→})
        {
            try
            {
                servlet = (HTMLAuthServlet[servP]) servlet_;
            }
            catch (ClassCastException e)
            {
                throw new ServletException("Error processing request");
            }

            if (req == null)
                throw new ServletException("Error processing request");

            final SessionState state_ = req.getSessionState(lbl);


            if (lbl <= new label {state_.store$→})
            {
                try
                {
                    final AuthSessState state = (AuthSessState)state_;
                    if (servlet == null || state == null)
                        throw new ServletException("Error processing request");

                    atomic
                    {
                        final label newLbl = new label {*lbl; req.session←};

                        if (req.session equiv state.sessionPrincipal)
                        {
                            this.invokeImpl(newLbl, req, servlet, state);
                        }
                        else
                        {
                            throw new ServletException("req.session not equivalent to state.sessionPrincipal");
                        }
                    }
                }
                catch (ClassCastException e)
                {
                    throw new ServletException("Incorrect session state");
                }
            }
        }
    }

    public void invokeImpl{*lbl}
    (   label{*lbl} lbl,
		Request[servP]{*lbl} req,
		HTMLAuthServlet[servP]{*lbl} servlet,
		AuthSessState{*lbl} state
	)
    throws  (ServletException{*lbl;req.session←})
    where   caller(req.session),
            lbl <= {req.session→},
            servP actsfor req.session,
            req.session equiv state.sessionPrincipal
    {
        if (req == null
            || servlet == null
            || state == null
            || !(servlet instanceof HTMLAuthServlet[servP]) )
            throw new ServletException("invalid args");

        if (createUserAct == null)
            throw new ServletException("createUserAct is null!");

        if (lbl <= new label{req.session→})
        {
			this.submit(lbl, (HTMLRequest[servP])req, (HTMLAuthServlet[servP]) servlet, state);
        }
        else
        {
            String lblString = null;
            lblString = LabelUtil.toString(lbl);
            throw new ServletException("SubmitNewUserAction.invokeSessImpl: lbl is too high: " + lblString);
        }
    }

    protected void submit{*lbl}
    (
        label{*lbl} lbl,
		HTMLRequest[servP]{*lbl} req,
		HTMLAuthServlet[servP]{*lbl} servlet,
		AuthSessState{*lbl} state
    )
    throws  (ServletException{*lbl;req.session←})
    where   req.session equiv state.sessionPrincipal,
            lbl <= {req.session→},
            servP actsfor req.session,
            caller(req.session)
    {

        if (req == null || servlet == null || state == null)
            return;

        if (lbl <= new label {req.store$->} && lbl <= new label {req.session->})
        {
			if (!(req.session instanceof SessionPrincipal))
				return;
        }
        else return;

        if (createUserAct == null
                || createUserAct.successAction == null
                || createUserAct.inpUserID == null
                || createUserAct.inpPassword == null
                || createUserAct.inpConfirm == null) return;

        ServletException ex = null;

        // user has submitted username and password.
        // extract data from request
        final label sessLbl = new label{req.session→;req.session←};

        if (    createUserAct.inpUserID.inputLbl <= sessLbl &&
                createUserAct.inpConfirm.inputLbl <= sessLbl &&
                createUserAct.inpPassword.inputLbl <= sessLbl &&
                new label {*lbl; req.session←} <= createUserAct.inpUserID.inputLbl &&
                lbl <= new label {req.session→;req.session←} &&
                sessLbl <= createUserAct.inpConfirm.inputLbl &&
                sessLbl <= createUserAct.inpPassword.inputLbl
            )
        {
            String userID = req.getParam(createUserAct.inpUserID);
            String password = req.getParam(createUserAct.inpPassword);
            String confirm = req.getParam(createUserAct.inpConfirm);

            // validate data
            String uidErr = null;
            String passwordErr = null;

            principal _loginUser = servlet.lookupUserID(userID, req.session);

            if (userID == null || userID.length() == 0)
            {
                // invalid user ID
                uidErr = "Invalid user ID.";
            }
            else if (password == null || password.length() == 0)
            {
                // invalid password
                passwordErr = "Please enter a password.";
            }
            else if (_loginUser != null)
            {
                // user exists
                passwordErr = "Sorry! That username is already taken.";
            }
            else if (!password.equals(confirm))
            {
                // unknown user or incorrect password
                passwordErr = "Passwords do not match.";
            }
            else
            {
                //now create user and login.
                passwordErr = runClosure(req, userID, (SessionPrincipal)req.session, password);
                	//success! lookup again.
            }
            final principal loginUser = servlet.lookupUserID(userID, req.session);
            if (uidErr != null || passwordErr != null)
            {
                // there were errors, send the user back to the login page.
                // DOWNGRADE REASON: The PC depends here on confidential info (i.e., the password).
                // We're prepared to declassify that the logon failed.
                declassify ({*lbl;req.session←})
                { // declassify the fact that the uid/password was wrong.
                    createUserAct.producePage(
                        new label {*lbl;req.session←},
                        req,
                        servlet,
                        state,
						declassify(uidErr, {*lbl;req.session←}),
						declassify(passwordErr, {*lbl;req.session←})
					);
                }
            }
            else {// FIXME: Fix this downgrade mess
                // successfully added!
                // set the current user in the session state, and send the user
                // back to the return action.
                // DOWNGRADE REASON: The current user is publically readable info. Here, we
                // depend on confidential information, i.e. the password. But we're happy to declassify
                // the fact that the user has logged on successfully.
                declassify({req.session→;req.session←} to {req.session←})
                {
                    final principal{req.session←} session = declassify(req.session, {req.session→;req.session←} to {req.session←});
                    if (session equiv req.session) {
                        declassify({req.session→;req.session←} to {req.session←})
                        {
                            final principal logU = declassify(endorse(loginUser, {session→;session←}), {session←});

                            try
                            {
                                final AuthSessState state_ = declassify(state, {session→;session←} to {session←});
                                if (state_.sessionPrincipal equiv session) // NPE thrown here!!
                                {
                                    state_.currentUser(logU);
                                }
                            }
                            catch (NullPointerException e) {}

                            final label newLbl = new label {*lbl; session←};
                            final CreateUserAction[servP] createUserAct = this.createUserAct;
                            if (createUserAct != null && createUserAct.successAction != null && session actsfor logU)
                            {
                                try
                                {
                                    createUserAct.successAction.invokeImpl(newLbl, req, servlet, state, logU);
                                }
                                catch (ServletException e)
                                {
                                    ex = e;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (ex != null)
            throw ex;
    }

    private String{req.session→;req.session←} runClosure{req.session:;req.session←}
    (
        Request[servP]{req.session→;req.session←} req,
        String{req.session→;req.session←} userID,
        SessionPrincipal{req.session→;req.session←} sp,
        String{req.session→;req.session←} password
	)
	where   caller(req.session), servP actsfor req.session
	{
        // DOWNGRADE REASON: Has effects at level {loginUser:}, which we need to hide away, since
        // session does not yet act for loginUser.
        declassify ({req.session←})
        {
        	Servlet[servP] servlet_ = getServlet();
        	// if (!(servlet_ instanceof AuthServlet[servP])) throw new ServletException("Error processing request");
        	final HTMLAuthServlet[servP] servlet = (HTMLAuthServlet[servP]) servlet_;

            FabricWorker worker = FabricWorker.getWorker();
            if (worker == null) return null;

            final Store{req.session←} localStore = worker.getLocalStore();

        	principal loginUser = null;
			try
			{
				loginUser = servlet.createUser(userID, password, req.session);
			}
			catch (ServletException e)
			{
				//HACK (TODO: not sure what this means ("HACK" comment from auth package version))
			}
            final principal logUser = declassify(loginUser, {req.session←});

            SessionPrincipal spdeclass = declassify(sp, {req.session→;req.session←} to {req.session←});
            LoginClosure[logUser] lc = new LoginClosure[logUser]{req.session←}@localStore(spdeclass);

            Capability[logUser, {logUser→}] cap =
                PrincipalUtil.authorize(
                        logUser,
                        declassify(password, {req.session←}),
                        lc,
                        new label {logUser→}
            );

            if (cap == null)
            {
                return "Unknown or incorrect username and password.";
            }
            // successful login!
            // loginUser delegates authority to the session principal
            cap.invoke();
        }
        return null;
     }
}