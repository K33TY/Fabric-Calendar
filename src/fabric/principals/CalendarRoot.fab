package fabric.principals;

import fabric.worker.Store;
import fabric.util.Map;
import calendar.Config;
// The below doesn't work if you don't use anything from the import...
//import fabric.util.*;

/**
*   The Calendar root principal that essentially has all the objects for the Calendar and is the top principal
*   It is the only principal that has integrity rights on final objects, but it doesn't use this except in
*   the possible case that something needs to be instantiated
*
*/
public class CalendarRoot extends ExternalPrincipal
{

	public CalendarRoot(String{this} name)
	{
		super(name);
	}


	public static CalendarRoot{⊤←} getInstance{⊤←} ()
	{
		atomic
		{
			FabricWorker w = FabricWorker.getWorker();
			if (w != null)
			{
				final Store store = w.getStore(Config.calendarStoreName);
				if (store != null)
				{
					Map rootMap = store.getRoot();
					if (rootMap != null)
					{
						//Object obj = rootMap.get(Config.calendarPrincipalMapKey);
						CalendarRoot calRoot = null;
	//						if (obj instanceof CalendarRoot)
	//						{
	//							servletP = (ServletPrincipal) obj;
	//						}
	//						else
	//						{
	//							servletP = new ServletPrincipal@store();
	//							rootMap.put(Config.calendarPrincipalMapKey, servletP);
	//						}

	//						return servletP;
					}
				}

			}
			return null;
		}
	}

	public static CalendarRoot{⊤←} getInstance{⊤←} (Store store)
	{
		return getInstance();
	}

}
