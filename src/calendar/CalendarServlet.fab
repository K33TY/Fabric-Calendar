package calendar;

import fabric.util.Map;
import sif.servlet.Servlet;
import sif.servlet.HTMLServlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;
import fabricated.util.List;
import fabricated.util.ArrayList;
import fabricated.util.ListIterator;
import fabricated.util.NoSuchElementException;
import fabricated.util.ConcurrentModificationException;
import fabricated.util.Comparator;
import login.*;

import javax.servlet.ServletException; // Why did Intellij have the intellisense to throw ServletException before I imported this?

/**
*   Entry point for calendar application, which should be the place where
*		- Fabric nodes instantiated
*       - Servlet instantiated
*       - A calendar object created
	(Looking at travel.customer.CustomerMain.fab example)
*/

public final class CalendarServlet extends HTMLAuthServlet[ServletPrincipal] authority (ServletPrincipal)
{
	final Store{this}@{⊤→} _localStore;
	final Store{this}@{⊤→} _store;
	final principal{this}@{⊤→} _calendar;

	public CalendarServlet()
	throws  ServletException
	where   {⊤→} ⊑ {this} //TODO: what does this mean? is it necessary??
	{
		FabricWorker w = FabricWorker.getWorker();
		Store localStore = null;

		// If a worker exists, then grab its local store
		if (w != null)
		{
			localStore = w.getLocalStore();
		}

		_localStore = localStore;
		_store = worker$.getStore(Config.calendarStoreName); // What is the dollar sign for?

		// If the store has a Map of Fabric objects, then grab the root of this
		Map root = null;
		if (_store != null)
		{
			root = (Map) _store.getRoot();
		}

		atomic
		{
			if (root != null)
			{
				Calendar[ServletPrincipal] calendarInit = null;
				Object obj = root.get(Config.calendarMapKey);

				if (obj instanceof Calendar[ServletPrincipal])
				{
					calendarInit = (Calendar[ServletPrincipal]) obj;
				}
				_calendar = calendarInit;
			}
			else
			{
				_calendar = null;
			}
		}
		super();
	}

	public void initialize{ServletPrincipal→; ServletPrincipal←}()
	throws  ServletException
	{
		addStartAction(new FrontPageAction(this));
		addStartAction(new LogoffAction[ServletPrincipal](this));
	}

	public String getPrivateHostID() throws ServletException
	{
		return "";
	}

	public String defaultActionName(Request[ServletPrincipal] req)
    {
        return "frontPage";
    }

    // Necessary runtime method for sif.servlet.Servlet.fab
    protected SessionState{*lbl} createSessionState{*lbl}
    (   // method params:
		label{*lbl} lbl,
		String{*lbl} id,
		SessionPrincipal{*lbl} session
	)
    {
        atomic
        {
            if ( _localStore != null &&
                 _localStore equiv worker$ &&
                 lbl <= new label{⊤→worker$} &&
                 new label {⊤←worker$} <= lbl )
            {
                return new SessionState@_localStore(id, session);
            }
            return null;
        }
    }

    // Necessary runtime method for sif.servlet.Servlet.fab
    protected SessionPrincipal createSessionPrincipal( String{_calendar→; _calendar←} id )
    {
        SessionPrincipal p = null;
        atomic
        {
            if (_store != null && _store equiv _calendar)
            {
                p = new SessionPrincipal@_store(id);
            }
        }
        return p;
    }

    public principal{p→; p←} lookupUserID{p→; p←}
    (
        String{p→; p←} uid,
        principal{p→; p←} p
    )
    throws  ServletException
    where   caller(p),
            authority (ServletPrincipal)
    {
        int pc_caller = 0;
        declassify ({pc_caller} meet {_→_})
        {
            Map rootMap = _store.getRoot();
            if (rootMap == null)
            {
                throw new ServletException("Store not accessible");
            }

            List[{ServletPrincipal→; ServletPrincipal←}] allUsers = null;

            Object obj = rootMap.get(Config.usersMapKey);
            if ( obj instanceof List[{ServletPrincipal→; ServletPrincipal←}] )
            {
                allUsers = ( List[{ServletPrincipal→; ServletPrincipal←}] ) obj;
            }

            if (allUsers == null)
            {
                throw new ServletException("Cannot fetch the collection of users from store");
            }
            //return findUserInList(allUsers, uid, p);
            return null;
        }
    }

//	TODO: info flow problems
//	public principal{p→; p←} createUser{p→; p←}
//	(
//	    String{p→; p←} uid,
//		String{p→; p←} password,
//		String{p→; p←} firstName,
//		String{p→; p←} lastName,
//		principal{p→; p←} p
//	)
//	throws  ServletException
//	where   caller(p),
//			authority (ServletPrincipal)
//	{
//	    int pc_caller = 0;
//	    declassify ({pc_caller} meet {_→_})
//	    {
//	        Map rootMap = _store.getRoot();
//	        if (rootMap == null)
//	        {
//	            throw new ServletException("Store not accessible");
//	        }
//
//	        List[{ServletPrincipal→; ServletPrincipal←}] allUsers = null;
//
//	        Object obj = rootMap.get(Config.usersMapKey);
//	        if ( obj instanceof List[{ServletPrincipal→; ServletPrincipal←}] )
//	        {
//	            allUsers = ( List[{ServletPrincipal→; ServletPrincipal←}] ) obj;
//	        }
//
//	        if (allUsers == null)
//	        {
//	            throw new ServletException("Could not get user list");
//	        }
//	        return addUserToList(allUsers, uid, password, firstName, lastName, p);
//	    }
//	}

//  private principal{p→; p←} addUserToList{p→; p←}
//	(
//		List[{ServletPrincipal→; ServletPrincipal←}]{p→; p←} allUsers,
//		String{p→; p←} uid,
//		String{p→; p←} password,
//		String{p→; p←} firstName,
//      String{p→; p←} lastName,
//		principal{p→; p←} p
//	)
//	where   caller(p, ServletPrincipal),
//	        endorse({p→; ServletPrincipal←})
//  {
//        declassify({ServletPrincipal←})
//        {
//            List[{ServletPrincipal→; ServletPrincipal←}] users = declassify(endorse(allUsers, {p→; ServletPrincipal←}), {ServletPrincipal←});
//
//            String userID = declassify(endorse(uid, {p→; ServletPrincipal←}), {ServletPrincipal←});
//            String _password = declassify(endorse(password, {p→; ServletPrincipal←}), {ServletPrincipal←});
//            //TODO: fix info flow problem
//            //User{ServletPrincipal←} ret = new User@_store(userID, _password, firstName, lastName);
//            //users.add(ret);
//
//            declassify( {p→; p←; ServletPrincipal←})
//            {
////                endorse({p→; p←})
////                {
////                    //User{p→; p←} theUser = declassify(endorse(ret, {p→; p←}), {p→; p←; ServletPrincipal←});
////                    //return theUser;
////                }
//					return null;
//            }
//        }
//  }
//
//	private principal{p→; p←} findUserInList{p→; p←}
//	(
//		List[{ServletPrincipal→; ServletPrincipal←}]{p→; p←} allUsers,
//		String{p→; p←} uid,
//		principal{p→; p←} p
//	)
//	where   caller(p, ServletPrincipal),
//		    endorse({p→; p← meet ServletPrincipal←})
//	{
//		declassify({p← meet ServletPrincipal←})
//		{
//			List[{ServletPrincipal→; ServletPrincipal←}] users = declassify(endorse(allUsers, {p→; p← meet ServletPrincipal←}), {p← meet ServletPrincipal←});
//			String userID = declassify(endorse(uid, {p→; p← meet ServletPrincipal←}), {p← meet ServletPrincipal←});
//			ListIterator iter = users.listIterator();
//			User ret = null;
//
//			while (iter.hasNext())
//			{
//				try
//				{
//					final Object o = iter.next();
//					if (new label {ServletPrincipal→; ServletPrincipal←} <= new label {o.store$→})
//					{
//						if (o instanceof User[ServletPrincipal])
//						{
//							final User[ServletPrincipal] u = (User[ServletPrincipal]) o;
//							if (new label {ServletPrincipal→; ServletPrincipal←} <= new label {u.store$→})
//							{
//								if (u.name().equals(userID))
//								{
//								// TODO: info flow problem
////									declassify({p→})
////									{
////										endorse({p→; p←})
////										{
////											ret = declassify(endorse( u,{ServletPrincipal→; p→; p←}), {p→});
////										}
////									}
//								}
//							}
//							else
//							{
//								throw new Error("HelloEP doesn't act for user");
//							}
//						}
//					}
//				}
//				catch (NoSuchElementException impossible) {}
//				catch (ConcurrentModificationException impossible) {}
//				catch (NullPointerException impossible) {}
//			}
//			User theUser = declassify(endorse(ret, {ServletPrincipal→; p→; p← meet ServletPrincipal←}), {p→; p← meet ServletPrincipal←});
//			return theUser;
//		}
//	}
}