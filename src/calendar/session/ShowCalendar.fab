package calendar.session;

import login.*;
import sif.html.*;
import fabric.util.Map;
import calendar.*;
import sif.servlet.Servlet;
import sif.servlet.Request;
import sif.servlet.SessionState;
import sif.servlet.SessionPrincipal;
import fabric.principals.ServletPrincipal;

import javax.servlet.ServletException;

public class ShowCalendar extends AuthenticatedAction[ServletPrincipal]
{
	public ShowCalendar(CalendarServlet{this} calendar)
	throws  ServletException
    {
        super("show", calendar);
    }

    public void invokeImpl{*lbl}
    (
        label{*lbl} lbl,
        Request[ServletPrincipal]{*lbl} req,
        HTMLAuthServlet[ServletPrincipal]{*lbl} servlet_,
        AuthSessState{*lbl} state_,
        principal{*lbl} currentUser
    )
    throws  (ServletException{*lbl; req.session←})
    where   caller(req.session),
            lbl <= {req.session→},
            req.session equiv state_.sessionPrincipal,
            req.session actsfor currentUser
    {
        atomic
        {
            if (new label {*lbl; _←_} <= new label {state_.store$→}) //TODO: what does this mean? It was in auth wiki (why let bottom integrity flow to store? isn't that bad?)
            {
//                if (req == null
//					 || servlet_ == null
//					 || state_ == null
//					 || !(servlet_ instanceof CalendarServlet)
//					 || !(state_ instanceof CalendarSessionState)
//					 )
//					 throw new ServletException("invalid args");
//
//				final CalendarServlet {*lbl} servlet = (CalendarServlet) servlet_;
//				final CalendarSessionState state = (CalendarSessionState) state_;
//
//				if (state.sessionPrincipal equiv req.session)
//				{
////					// No state created yet
////					if (state.currentUser == null && state.displayDate == null && state.displayKind == null && state.displayUser == null)
////					{
////						// State should already be created in the way I am doing this where I am not holding an inner state within my state object
////						// so maybe throw error here if this is not true
////					}
//
//					final CalendarSessionState{*lbl; req.session←} s = state;
//					if (s == null)
//					{
//						throw new ServletException("No state");
//					}
//
//					if (lbl <= new label {s.currentUser←} && req.session actsfor s.currentUser)
//					{
//	                    if (state.scsa == null)
//	                    {
//	                        // hasn't yet been created.
//	                        ShowCalendarSessAction scsa = new ShowCalendarSessAction(servlet, req.session, s.currentUser);
//	                        //updateState(state, scsa, s.currentUser); TODO: INFO FLOW PROBLEM (but also not sure what's going on)
//	                    }
//
//	                    ServletException{*lbl; req.session←} ex = null;
//
//	                    final ShowCalendarSessAction scsa = state.scsa;
//	                    if (scsa != null && s != null && req.session equiv scsa.session)
//	                    {
////	                        try
////	                        {
//	                            final User[ServletPrincipal] currentUser_ = s.currentUser;
//	                            //scsa.invokeImpl(lbl, req, servlet, state_, currentUser_); //TODO: INFO FLOW PROBLEM
////	                        }
////	                        catch (ServletException e)
////	                        {
////	                            //ex = e; //TODO: why compiler thinks this is unreachable?
////	                        }
//	                    }
//	                    if (ex != null)
//	                        throw ex;
//	                }
//				}
            }
        }
    }

	private void updateState{p←}
	(
		CalendarSessionState{p←} sessState,
        ShowCalendarSessAction{p←} scsa,
        principal{p←} p
    )
    where   caller(sessState.sessionPrincipal),
            sessState.sessionPrincipal actsfor p,
            endorse({sessState.sessionPrincipal←})
    {
        if (endorse(sessState, {sessState.sessionPrincipal←}) == null) return;

        final CalendarSessionState ss = endorse(sessState, {p←} to {sessState.sessionPrincipal←});
        final principal sess = endorse(sessState.sessionPrincipal, {p←} to {sessState.sessionPrincipal←});

        if (ss.sessionPrincipal equiv sess)
            ss.scsa = endorse(scsa, {p←} to {sessState.sessionPrincipal←});
    }
}