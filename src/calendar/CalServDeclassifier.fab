package calendar;

/*
TODO: I don't think this class can port this way from Jif to Fabric because cannot find declassify method and does endorsing work?
*/

//import userserv.*; // Do I need this?
import sif.servlet.*;
import sif.html.*;
import fabric.util.*;
import fabric.common.util.*;

public class CalServDeclassifier authority (CalServEP)
{
	// TODO: Confused by this method, why is there a lowercase principal? The double cast???
	// DOWNGRADE REASON: transfer user list from CalServEP to p
	static principal{p→; p←}[]{p→; p←} userListToPrincipals{users}( principal{users} p,
	                                                                List[{CalServEP:;CalServEP!:}]{p→; p←} users )
		where caller (CalServEP,p),
			  endorse({p→; p←})
	{
	    if (users == null) return null;

	    int size = transfer(CalServEP, p, users.size());

	    principal{p→; p←}[] ps = new principal[ (size<0) ? 0 : size ];

	    for (int i = 0; i < size; i++)
	    {
	        UserPrincipal{CalServEP→; CalServEP←} u = null;
	        try
	        {
	            u = (UserPrincipal) users.get(i);
	        }
	        catch (IndexOutOfBoundsException impossible) { }
	        catch (ClassCastException impossible) { }
	        try
	        {
	            ps[i] = (principal)(Principal)transfer(CalServEP, p, u);
	        }
	        catch (IndexOutOfBoundsException impossible) { }
	        catch (ClassCastException impossible) { }
	    }
	    return ps;
	}

	// DOWNGRADE REASON: transfer user display string from CalServEP to p
	static String{*lbl} declassUserDisplayString{p→}( label{p→} lbl,
													  principal{p→} p,
													  UserPrincipal{CalServEP→; CalServEP←} u )
		where {p←} <= lbl,
			  lbl <= {p→},
			  caller (CalServEP,p),
			  endorse({p→; p←})
	{
		String userName = (u == null) ? null : u.displayString();
		String s = null;
		try
		{
		    s = (String) transfer(CalServEP, p, userName);
		}
		catch (ClassCastException imposs) { }
		return declassify(s, {*lbl; p←});
	}

	// DOWNGRADE REASON: transfer user list from CalServEP to p
	static String{*lbl} declassUserListToString{p→; p} ( label{p→} lbl,
											             principal{users} p,
											             List[{CalServEP→; CalServEP←}]{p→} users,
											             boolean{users} useDisplayString,
											             String{users} separator                    )
		where {p←} <= lbl,
			  lbl <= {p→},
			  caller (CalServEP, p),
			  endorse({p→; p←})
	{
		String sb = "";
		int i = 0;
		while (users != null && i < users.size())
		{
			try
			{
				UserPrincipal u = (UserPrincipal) users.get(i); //UserPrincipal{CalServEP→; CalServEP←} ??
				if (u != null)
				{
					if (useDisplayString)
					{
						sb += u.displayString();
					}
					else {
						sb += u.name();
					}
				}
				if (i+1 < users.size())
				{
					sb += separator;
				}
			}
			catch (IndexOutOfBoundsException impossible) { }
			catch (ClassCastException impossible) { }

			i++;
		}
		String{p→; p←} s = null;
		try
		{
			s = (String)transfer(CalServEP, p, sb);
		}
		catch (ClassCastException imposs) { }
		return declassify(s, {*lbl; p←});
	}

	// DOWNGRADE REASON: utility method to transfer object from P to Q
	static Object{Q→; Q←: meet P←} transfer{P→; Q→}( principal{P→; Q→} P,
												     principal{P→; Q→} Q,
												     Object{P→; Q→} o       )
		where caller(P,Q),
		endorse({P→; Q→; P← meet Q←})
	{
		declassify ({P← meet Q←})
		{
			Object o1 = endorse(o, {P→; Q→} to {P→; Q→; Q← meet P←});
			Object o2 = declassify(o1, {P→; Q← meet P←; Q→} to {Q← meet P←; Q→});
			return o2;
		}
	}

	// DOWNGRADE REASON: utility method to transfer int from P to Q
	static int{Q→; Q←: meet P←} transfer{P→; P←; Q→; Q←}( principal{P→; P←; Q→; Q←} P,
													      principal{P→; P←; Q→; Q←} Q,
													      int{P→; P←; Q→; Q←} i         )
		where caller(P,Q),
			  endorse({P→; Q→; P← meet Q←})
	{
		try
		{
		  return ((Integer) transfer( P, Q, new Integer(i) ) ).intValue();
		}
		catch (ClassCastException impossible) { }
		catch (NullPointerException impossible) { }
		return 0;
	}

	// DOWNGRADE REASON: a utility method to transfer date from P to Q
	static Date[{Q→; Q←}]{Q→; Q←} declassDate{P←}( principal{P←} P,
	                                               principal{Q→; Q←} Q,
	                                               Date[{P←}]{P←} d     )
		where caller(P, Q),
			  endorse({P← meet Q←})
	{
		declassify ({P← meet Q←})
		{
			int day     = (d == null) ? 0 : d.getDay();
            int month   = (d == null) ? 0 : d.getMonth();
            int year    = (d == null) ? 0 : d.getYear();
            int hour    = (d == null) ? 0 : d.getHour();
            int minute  = (d == null) ? 0 : d.getMinute();

			int dd = transfer(P, Q, day);
			int mo = transfer(P, Q, month);
			int yy = transfer(P, Q, year);
			int hh = transfer(P, Q, hour);
			int mi = transfer(P, Q, minute);

			Date[{Q→; Q←}] newD = null;
			try
			{
			  newD = new Date[{Q→; Q←}](yy, mo, dd, hh, mi);
			}
			catch (IllegalArgumentException impossible) { }
			return newD;
		}
	}

	// TODO: Not sure this declassify method exists in fabric, didn't seem to find one like this...
	// DOWNGRADE REASON: a utility method to transfer date from P to lbl
	static Date[lbl]{P←; lbl} declassDate{P→;P←}( principal{P→;P←} P,
												  label{P→;P←} lbl,
												  Date[{P→;P←}]{P→;P←} d )
		where {P←} <= lbl,
			  caller(P)
	{
		int day     = (d == null) ? 0 : d.getDay();
		int month   = (d == null) ? 0 : d.getMonth();
		int year    = (d == null) ? 0 : d.getYear();
		int hour    = (d == null) ? 0 : d.getHour();
		int minute  = (d == null) ? 0 : d.getMinute();

		int dd = declassify(day, {P→;P←} to {P←});
		int mo = declassify(month, {P→;P←} to {P←});
		int yy = declassify(year, {P→;P←} to {P←});
		int hh = declassify(hour, {P→;P←} to {P←});
		int mi = declassify(minute, {P→;P←} to {P←});

		Date[lbl] newD = null;
		try
		{
		    newD = new Date[lbl](yy, mo, dd, hh, mi);
		}
		catch (IllegalArgumentException impossible) { }
		return newD;
	}
}
