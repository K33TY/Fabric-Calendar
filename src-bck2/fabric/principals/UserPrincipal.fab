package fabric.principals;

import fabric.worker.Store;
import fabric.util.*;
import calendar.Config;
import calendar.User;

import login.LoginClosure;

public class UserPrincipal extends ExternalPrincipal
{
    private final UserPassword[this]{this}@{⊤→} pass; // Don't care that a password is set as long as cannot read password

    // Add principal
    public UserPrincipal(String{this} userName, String{this} password)
    where authority (this)
    {
        this.pass = new UserPassword[this](password);
        super(userName);
    }

    // TODO: boolean of isAuthorized()

	// Maybe we assume at this point that User does not have all fields there but
    // we don't care if a user knows any username and their supposed password which the servlet has captured so far (only)
	public static UserPrincipal{⊤←} getInstance{⊤←}(String userName, String password)
	where   {userName} ⊑ {⊤←},
			{password} ⊑ {⊤←}    // TODO: endorsement because probably cannot make this guarantee from call site and
								 //  therefore will not actually be able to use this method
			//endorse(userName), //this means that original caller of method endorses this field?
	{
		atomic
		{
			FabricWorker w = FabricWorker.getWorker();
			if (w != null)
			{
				final Store store = w.getStore(Config.calendarStoreName); // One store at the moment
				if (store != null)
				{
					Map rootMap = store.getRoot();

					if (rootMap != null)
					{
						Object obj = rootMap.get(userName);
						UserPrincipal userP = null;

						if (obj instanceof UserPrincipal)
						{
							userP = (UserPrincipal) obj;
						}
						else
						{
							// TODO: prompt to create a user object
							// Does this work to create a user principal?
							userP = new UserPrincipal@store(userName, password);
							rootMap.put(userName, userP);
						}
						return userP;
					}
				}
			}

			return null;
		}
	}
}

class UserPassword[principal P]
{
    final String{P→; P←} password;

    UserPassword(String{P→; P←} password)
    {
        this.password = password;
        super();
    }
}
